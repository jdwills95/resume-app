{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/current-screen-width/current-screen-width.service\";\nimport * as i2 from \"src/app/services/nav-bar/nav-bar.service\";\nimport * as i3 from \"src/app/services/scroll/scroll.service\";\nimport * as i4 from \"@angular/router\";\nexport class AppComponent {\n  constructor(currentScreenWidthService, navBarService, scrollService) {\n    this.currentScreenWidthService = currentScreenWidthService;\n    this.navBarService = navBarService;\n    this.scrollService = scrollService;\n    this.title = 'resume-app';\n    this.isDesktopOrBigger = true;\n    this.scrollServiceCheckAllowed = false;\n    this.isNavbarOpen = false;\n  }\n  ngAfterViewInit() {\n    this.scrollServiceCheckAllowed = true;\n  }\n  onResize() {\n    this.isDesktopOrBigger = this.currentScreenWidthService.isScreenWidthLargeDesktopOrBigger();\n  }\n  navBarButtonClickedRev() {\n    this.isNavbarOpen = !this.isNavbarOpen;\n    if (this.scrollServiceCheckAllowed) {\n      if (this.isNavbarOpen) {\n        this.scrollService.disable();\n      } else {\n        this.scrollService.enable();\n      }\n    }\n  }\n  closeNavBar() {\n    this.scrollService.enable();\n    this.navBarService.closeNavBar();\n    this.isNavbarOpen = false;\n  }\n  checkNavbarOpen() {\n    const isNavOpen = this.navBarService.getIsNavbarOpen();\n    if (this.scrollServiceCheckAllowed) {\n      if (isNavOpen) {\n        this.scrollService.disable();\n      } else {\n        this.scrollService.enable();\n      }\n    }\n    return isNavOpen;\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CurrentScreenWidthService), i0.ɵɵdirectiveInject(i2.NavBarService), i0.ɵɵdirectiveInject(i3.ScrollService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  hostBindings: function AppComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function AppComponent_resize_HostBindingHandler($event) {\n        return ctx.onResize($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  decls: 1,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"router-outlet\");\n    }\n  },\n  dependencies: [i4.RouterOutlet],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;AAWA,OAAM,MAAOA,YAAY;EAMvBC,YACUC,yBAAoD,EACpDC,aAA4B,EAC5BC,aAA4B;IAF5B,8BAAyB,GAAzBF,yBAAyB;IACzB,kBAAa,GAAbC,aAAa;IACb,kBAAa,GAAbC,aAAa;IARvB,UAAK,GAAG,YAAY;IACpB,sBAAiB,GAAG,IAAI;IACxB,8BAAyB,GAAG,KAAK;IACjC,iBAAY,GAAG,KAAK;EAMjB;EAEHC,eAAe;IACb,IAAI,CAACC,yBAAyB,GAAG,IAAI;EACvC;EAGAC,QAAQ;IACN,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACN,yBAAyB,CAACO,iCAAiC,EAAE;EAC7F;EAEAC,sBAAsB;IACpB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;IACtC,IAAI,IAAI,CAACL,yBAAyB,EAAE;MAClC,IAAI,IAAI,CAACK,YAAY,EAAE;QACrB,IAAI,CAACP,aAAa,CAACQ,OAAO,EAAE;OAC7B,MAAM;QACL,IAAI,CAACR,aAAa,CAACS,MAAM,EAAE;;;EAGjC;EAEAC,WAAW;IACT,IAAI,CAACV,aAAa,CAACS,MAAM,EAAE;IAC3B,IAAI,CAACV,aAAa,CAACW,WAAW,EAAE;IAChC,IAAI,CAACH,YAAY,GAAG,KAAK;EAC3B;EAEAI,eAAe;IACb,MAAMC,SAAS,GAAG,IAAI,CAACb,aAAa,CAACc,eAAe,EAAE;IACtD,IAAI,IAAI,CAACX,yBAAyB,EAAE;MAClC,IAAIU,SAAS,EAAE;QACb,IAAI,CAACZ,aAAa,CAACQ,OAAO,EAAE;OAC7B,MAAM;QACL,IAAI,CAACR,aAAa,CAACS,MAAM,EAAE;;;IAG/B,OAAOG,SAAS;EAClB;;;mBAhDWhB,YAAY;AAAA;;QAAZA,YAAY;EAAAkB;EAAAC;IAAA;;eAAZC,oBAAgB;MAAA;;;;;;;MCX7BC,gCAA+B","names":["AppComponent","constructor","currentScreenWidthService","navBarService","scrollService","ngAfterViewInit","scrollServiceCheckAllowed","onResize","isDesktopOrBigger","isScreenWidthLargeDesktopOrBigger","navBarButtonClickedRev","isNavbarOpen","disable","enable","closeNavBar","checkNavbarOpen","isNavOpen","getIsNavbarOpen","selectors","hostBindings","ctx","i0"],"sourceRoot":"","sources":["C:\\Users\\jdwil\\Projects\\resume-app\\src\\app\\app.component.ts","C:\\Users\\jdwil\\Projects\\resume-app\\src\\app\\app.component.html"],"sourcesContent":["import { Component, HostListener, AfterViewInit } from '@angular/core';\r\n\r\nimport { CurrentScreenWidthService } from 'src/app/services/current-screen-width/current-screen-width.service';\r\nimport { NavBarService } from 'src/app/services/nav-bar/nav-bar.service';\r\nimport { ScrollService } from 'src/app/services/scroll/scroll.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements AfterViewInit {\r\n  title = 'resume-app';\r\n  isDesktopOrBigger = true;\r\n  scrollServiceCheckAllowed = false;\r\n  isNavbarOpen = false;\r\n\r\n  constructor(\r\n    private currentScreenWidthService: CurrentScreenWidthService,\r\n    private navBarService: NavBarService,\r\n    private scrollService: ScrollService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.scrollServiceCheckAllowed = true;\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(): void {\r\n    this.isDesktopOrBigger = this.currentScreenWidthService.isScreenWidthLargeDesktopOrBigger();\r\n  }\r\n\r\n  navBarButtonClickedRev(): void {\r\n    this.isNavbarOpen = !this.isNavbarOpen;\r\n    if (this.scrollServiceCheckAllowed) {\r\n      if (this.isNavbarOpen) {\r\n        this.scrollService.disable();\r\n      } else {\r\n        this.scrollService.enable();\r\n      }\r\n    }\r\n  }\r\n\r\n  closeNavBar(): void {\r\n    this.scrollService.enable();\r\n    this.navBarService.closeNavBar();\r\n    this.isNavbarOpen = false;\r\n  }\r\n\r\n  checkNavbarOpen(): boolean {\r\n    const isNavOpen = this.navBarService.getIsNavbarOpen();\r\n    if (this.scrollServiceCheckAllowed) {\r\n      if (isNavOpen) {\r\n        this.scrollService.disable();\r\n      } else {\r\n        this.scrollService.enable();\r\n      }\r\n    }\r\n    return isNavOpen;\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}