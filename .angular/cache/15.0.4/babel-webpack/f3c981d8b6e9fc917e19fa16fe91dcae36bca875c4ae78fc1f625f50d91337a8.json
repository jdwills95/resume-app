{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services//array-to-string/array-to-string.service\";\nexport class ParseDataService {\n  constructor(arrayToStringService) {\n    this.arrayToStringService = arrayToStringService;\n  }\n  existCheck(otherJson, field, fieldSecordary) {\n    if (otherJson[field]) {\n      const skillLvl = otherJson[field];\n      if (skillLvl[fieldSecordary]) {\n        // @ts-ignore\n        const skill = skillLvl[fieldSecordary];\n        return skill;\n      }\n    }\n    return undefined;\n  }\n  /**\r\n   * Sets assignments with data from assignmentsJson.\r\n   *\r\n   * @param assignmentsJson {IAssignmentJSON[]} data to set assignments with.\r\n   */\n  setAssignments(assignmentsJson) {\n    return assignmentsJson.map(assignment => {\n      return {\n        endDate: assignment.endDate,\n        startDate: assignment.startDate,\n        title: assignment.title,\n        employer: assignment.employer,\n        desc: assignment.desc,\n        environments: this.arrayToStringService.arrayToString(assignment.environments)\n      };\n    });\n  }\n  setCourseTraining(courseTrainingItem) {\n    return {\n      badges: courseTrainingItem.badges,\n      training: courseTrainingItem.training\n    };\n  }\n  setEducation(education) {\n    return education.map(degree => {\n      return {\n        degree: degree.degree,\n        field: degree.field,\n        school: {\n          name: degree.school.name,\n          location: degree.school.location\n        },\n        graduationYear: degree.graduationYear\n      };\n    });\n  }\n  setEmployerHistory(employerHistoryJSON) {\n    return employerHistoryJSON.map(employer => {\n      return {\n        endDate: employer.endDate,\n        startDate: employer.startDate,\n        employer: employer.employer,\n        jobTitle: employer.jobTitle,\n        location: employer.location,\n        desc: {\n          desct: employer.desc.desct,\n          task: employer.desc.task\n        }\n      };\n    });\n  }\n  setOther(other) {\n    return {\n      operatingSystems: {\n        advanced: this.existCheck(other, 'operatingSystems', 'advanced'),\n        intermediate: this.existCheck(other, 'operatingSystems', 'intermediate'),\n        beginner: this.existCheck(other, 'operatingSystems', 'beginner')\n      },\n      software: {\n        advanced: this.existCheck(other, 'software', 'advanced'),\n        intermediate: this.existCheck(other, 'software', 'intermediate'),\n        beginner: this.existCheck(other, 'software', 'beginner')\n      },\n      certifications: other.certifications,\n      businessKnowledge: other.businessKnowledge\n    };\n  }\n  setSkills(skillJson) {\n    return {\n      languages: this.arrayToStringService.arrayToString(skillJson.languages),\n      languagesAry: skillJson.languages,\n      frameworks: this.arrayToStringService.arrayToString(skillJson.frameworks),\n      frameworksAry: skillJson.frameworks,\n      softwareTools: this.arrayToStringService.arrayToString(skillJson.softwareTools),\n      softwareToolsAry: skillJson.softwareTools,\n      methods: this.arrayToStringService.arrayToString(skillJson.methods),\n      methodsAry: skillJson.methods\n    };\n  }\n}\nParseDataService.ɵfac = function ParseDataService_Factory(t) {\n  return new (t || ParseDataService)(i0.ɵɵinject(i1.ArrayToStringService));\n};\nParseDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParseDataService,\n  factory: ParseDataService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["ParseDataService","constructor","arrayToStringService","existCheck","otherJson","field","fieldSecordary","skillLvl","skill","undefined","setAssignments","assignmentsJson","map","assignment","endDate","startDate","title","employer","desc","environments","arrayToString","setCourseTraining","courseTrainingItem","badges","training","setEducation","education","degree","school","name","location","graduationYear","setEmployerHistory","employerHistoryJSON","jobTitle","desct","task","setOther","other","operatingSystems","advanced","intermediate","beginner","software","certifications","businessKnowledge","setSkills","skillJson","languages","languagesAry","frameworks","frameworksAry","softwareTools","softwareToolsAry","methods","methodsAry","factory"],"sourceRoot":"","sources":["C:\\Users\\jdwil\\Projects\\resume-app\\src\\app\\services\\parse-data\\parse-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IAssignmentJSON, IAssignment } from 'src/app/interfaces/assignment';\r\n\r\nimport { ICourseTrainingItem } from 'src/app/interfaces/courseTraining';\r\nimport { IEducation } from 'src/app/interfaces/education';\r\nimport { IEmployerHistory } from 'src/app/interfaces/employerHistory';\r\nimport {\r\n  IOther,\r\n  OtherFields,\r\n  OtherFieldsSecondary,\r\n} from 'src/app/interfaces/other';\r\nimport { ISkillJson, ISkill } from 'src/app/interfaces/skills';\r\n\r\nimport { ArrayToStringService } from 'src/app/services//array-to-string/array-to-string.service';\r\n\r\n@Injectable()\r\nexport class ParseDataService {\r\n  constructor(private arrayToStringService: ArrayToStringService) {}\r\n\r\n  existCheck(\r\n    otherJson: IOther,\r\n    field: OtherFields,\r\n    fieldSecordary: OtherFieldsSecondary\r\n  ): string[] | undefined {\r\n    if (otherJson[field]) {\r\n      const skillLvl = otherJson[field];\r\n      if (skillLvl[fieldSecordary]) {\r\n        // @ts-ignore\r\n        const skill: string[] = skillLvl[fieldSecordary];\r\n        return skill;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Sets assignments with data from assignmentsJson.\r\n   *\r\n   * @param assignmentsJson {IAssignmentJSON[]} data to set assignments with.\r\n   */\r\n  setAssignments(assignmentsJson: IAssignmentJSON[]): IAssignment[] {\r\n    return assignmentsJson.map((assignment) => {\r\n      return {\r\n        endDate: assignment.endDate,\r\n        startDate: assignment.startDate,\r\n        title: assignment.title,\r\n        employer: assignment.employer,\r\n        desc: assignment.desc,\r\n        environments: this.arrayToStringService.arrayToString(\r\n          assignment.environments\r\n        ),\r\n      };\r\n    });\r\n  }\r\n\r\n  setCourseTraining(\r\n    courseTrainingItem: ICourseTrainingItem\r\n  ): ICourseTrainingItem {\r\n    return {\r\n      badges: courseTrainingItem.badges,\r\n      training: courseTrainingItem.training,\r\n    };\r\n  }\r\n\r\n  setEducation(education: IEducation[]): IEducation[] {\r\n    return education.map((degree) => {\r\n      return {\r\n        degree: degree.degree,\r\n        field: degree.field,\r\n        school: {\r\n          name: degree.school.name,\r\n          location: degree.school.location,\r\n        },\r\n        graduationYear: degree.graduationYear,\r\n      };\r\n    });\r\n  }\r\n\r\n  setEmployerHistory(\r\n    employerHistoryJSON: IEmployerHistory[]\r\n  ): IEmployerHistory[] {\r\n    return employerHistoryJSON.map((employer) => {\r\n      return {\r\n        endDate: employer.endDate,\r\n        startDate: employer.startDate,\r\n        employer: employer.employer,\r\n        jobTitle: employer.jobTitle,\r\n        location: employer.location,\r\n        desc: {\r\n          desct: employer.desc.desct,\r\n          task: employer.desc.task,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  setOther(other: IOther): IOther {\r\n    return {\r\n      operatingSystems: {\r\n        advanced: this.existCheck(other, 'operatingSystems', 'advanced'),\r\n        intermediate: this.existCheck(\r\n          other,\r\n          'operatingSystems',\r\n          'intermediate'\r\n        ),\r\n        beginner: this.existCheck(other, 'operatingSystems', 'beginner'),\r\n      },\r\n      software: {\r\n        advanced: this.existCheck(other, 'software', 'advanced'),\r\n        intermediate: this.existCheck(other, 'software', 'intermediate'),\r\n        beginner: this.existCheck(other, 'software', 'beginner'),\r\n      },\r\n      certifications: other.certifications,\r\n      businessKnowledge: other.businessKnowledge,\r\n    };\r\n  }\r\n\r\n  setSkills(skillJson: ISkillJson): ISkill {\r\n    return {\r\n      languages: this.arrayToStringService.arrayToString(skillJson.languages),\r\n      languagesAry: skillJson.languages,\r\n      frameworks: this.arrayToStringService.arrayToString(skillJson.frameworks),\r\n      frameworksAry: skillJson.frameworks,\r\n      softwareTools: this.arrayToStringService.arrayToString(\r\n        skillJson.softwareTools\r\n      ),\r\n      softwareToolsAry: skillJson.softwareTools,\r\n      methods: this.arrayToStringService.arrayToString(skillJson.methods),\r\n      methodsAry: skillJson.methods,\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}